// Generated by LiveScript 1.3.1
(function(){
  var Backbone, h, subscriptionMan, colors, UdpGun, os, _, ref$, map, fold1, listsToObj, Logger, Context, slice$ = [].slice;
  Backbone = require('backbone4000');
  h = require('helpers');
  subscriptionMan = require('subscriptionman2');
  colors = require('colors');
  UdpGun = require('udp-client');
  os = require('os');
  _ = require('underscore');
  ref$ = require('prelude-ls'), map = ref$.map, fold1 = ref$.fold1, listsToObj = ref$.listsToObj;
  Logger = exports.Logger = subscriptionMan.basic.extend4000({
    log: function(){
      var contexts, ensureContext, send, this$ = this;
      contexts = slice$.call(arguments);
      ensureContext = function(it){
        var checkContextFun, checkContextObj, ensureTags;
        checkContextFun = function(it){
          var bla, ref$;
          switch (bla = (ref$ = it.logContext) != null ? ref$.constructor : void 8) {
          case undefined:
            return it;
          case Object:
            return it.logContext;
          case Function:
            return it.logContext();
          default:
            throw Error("logContext type mismatch");
          }
        };
        checkContextObj = function(it){
          if ((it != null ? it.constructor : void 8) !== Object) {
            throw Error("can't cast '" + it + "' to logContext");
          }
          if (!it.tags && !it.data) {
            throw Error("this is not a valid logContext object");
          }
          return {
            tags: it.tags,
            data: it.data || {}
          };
        };
        ensureTags = function(it){
          return {
            data: it.data,
            tags: (function(){
              switch (it.tags.constructor) {
              case Object:
                return it.tags;
              case Array:
                return h.arrayToDict(it.tags);
              case undefined:
                return {};
              default:
                throw "invalid tags";
              }
            }())
          };
        };
        return compose$(checkContextFun, checkContextObj, ensureTags)(it);
      };
      send = function(it){
        return this$.event(it);
      };
      return send(
      fold1(h.extend)(
      map(ensureContext)(
      contexts)));
    }
  });
  Context = (function(){
    Context.displayName = 'Context';
    var prototype = Context.prototype, constructor = Context;
    function Context(it){
      this.x = it;
    }
    return Context;
  }());
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
