// Generated by LiveScript 1.3.1
(function(){
  var ref$, map, fold1, keys, values, first, flatten, h, net, Backbone, subscriptionMan, colors, UdpGun, os, util, Console, Udp, tcpServer;
  ref$ = require('prelude-ls'), map = ref$.map, fold1 = ref$.fold1, keys = ref$.keys, values = ref$.values, first = ref$.first, flatten = ref$.flatten;
  h = require('helpers');
  net = require('net');
  Backbone = require('backbone4000');
  subscriptionMan = require('subscriptionman2');
  colors = require('colors');
  UdpGun = require('udp-client');
  os = require('os');
  util = require('util');
  h.extendm(exports, require('./index'));
  console.log("LOGGER", exports.Logger);
  Console = exports.Console = Backbone.Model.extend4000({
    name: 'console',
    initialize: function(){
      return this.startTime = process.hrtime()[0];
    },
    parseTags: function(tags){
      return map(function(tag){
        if (tag === 'fail' || tag === 'error') {
          return colors.red(tag);
        }
        if (tag === 'pass' || tag === 'ok' || tag === 'success' || tag === 'completed') {
          return colors.green(tag);
        }
        if (tag === 'GET' || tag === 'POST' || tag === 'login' || tag === 'in' || tag === 'out') {
          return colors.magenta(tag);
        }
        return colors.yellow(tag);
      })(
      keys(
      tags));
    },
    log: function(logEvent){
      var hrtime, tags;
      hrtime = process.hrtime();
      tags = this.parseTags(logEvent.tags);
      return console.log(colors.green((hrtime[0] - this.startTime) + "." + hrtime[1]) + "\t " + tags.join(', ') + "\t" + (logEvent.msg || "-"));
    }
  });
  Udp = exports.Udp = Backbone.Model.extend4000({
    name: 'udp',
    initialize: function(settings){
      this.settings = settings != null
        ? settings
        : {
          host: 'localhost',
          port: 6000
        };
      this.gun = new UdpGun(this.settings.port, this.settings.host);
      return this.hostname = os.hostname();
    },
    log: function(logEvent){
      return this.gun.send(new Buffer(JSON.stringify(h.extendm({
        type: 'nodelogger',
        host: this.hostname
      }, this.settings.extendPacket || {}, {
        data: logEvent.data,
        tags: keys(logEvent.tags)
      }))));
    }
  });
  tcpServer = exports.tcpServer = Backbone.Model.extend4000({
    name: 'tcpServer',
    initialize: function(settings){
      var cnt, server, this$ = this;
      this.settings = settings != null
        ? settings
        : {
          port: 7000,
          host: '0.0.0.0'
        };
      cnt = 0;
      this.clients = {};
      server = net.createServer(function(socket){
        var id;
        id = cnt++;
        this$.clients[id] = socket;
        return socket.on('close', function(){
          var ref$, ref1$;
          return ref1$ = (ref$ = this$.clients)[id], delete ref$[id], ref1$;
        });
      });
      return server.listen(this.settings.port, this.settings.host);
    },
    log: function(logEvent){
      var this$ = this;
      return map(function(it){
        return it.write(JSON.stringify(h.extendm({
          host: this$.hostname
        }, this$.settings.extendPacket || {}, {
          data: logEvent.data,
          tags: keys(logEvent.tags)
        })) + "\n");
      })(
      values(
      this.clients));
    }
  });
}).call(this);
